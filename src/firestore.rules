rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Checks if the user is a member of the organization by checking the members map.
    function isOrgMember(orgId) {
      return request.auth != null && get(/databases/$(database)/documents/organizations/$(orgId)).data.members[request.auth.uid] != null;
    }
    
    // Checks if the user is the owner of the organization.
    function isOwner(orgId) {
       return request.auth != null && get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId);
      allow write: if isOwner(orgId);
    }

    match /organizations/{orgId}/members/{memberId} {
      allow read: if isOrgMember(orgId);
      allow write: if isOwner(orgId);
    }

    match /tasks/{taskId} {
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /projects/{projectId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }
    
    match /teams/{teamId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /invites/{inviteId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null;
    }
    
    match /taskTemplates/{templateId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /checklistTemplates/{templateId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }
    
    match /automations/{automationId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }
    
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /apiKeys/{keyId} {
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
      allow read, delete, update: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /webhooks/{webhookId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /aiFeedback/{feedbackId} {
      allow create: if request.auth != null;
    }
    
    match /personalGoals/{goalId} {
       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /teamChallenges/{challengeId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /ideas/{ideaId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update: if request.auth != null; 
    }

    match /notifications/{notificationId} {
       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /activityFeed/{feedItemId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /presence/{userId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/organizations/$(resource.data.organizationId)).data.members[request.auth.uid] != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
