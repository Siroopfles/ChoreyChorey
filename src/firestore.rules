rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isMember(orgId) {
      // Correctly checks if the requesting user's `organizationIds` array contains the given orgId.
      // This requires that the rules allow reading the user's own document.
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isAuth() && orgId in userDoc.data.organizationIds;
    }

    function isOwner(orgId) {
      return isAuth() && get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    // Collection Rules
    match /users/{userId} {
      allow read, write: if isUser(userId);
      // Allow any authenticated member of a shared organization to get basic user info
      // This is necessary for showing user names/avatars etc.
      allow get: if isAuth();
    }

    match /organizations/{orgId} {
      allow read: if isMember(orgId);
      // Only the owner can update/delete the organization document itself.
      allow update, delete: if isOwner(orgId);
      // Any authenticated user can create a new organization.
      allow create: if isAuth();
    }

    match /tasks/{taskId} {
      allow create: if isMember(request.resource.data.organizationId);
      allow read, update, delete: if isMember(resource.data.organizationId);
    }
    
    match /projects/{projectId} {
      allow create: if isMember(request.resource.data.organizationId);
      allow read, update, delete: if isMember(resource.data.organizationId);
    }

    match /teams/{teamId} {
      allow create: if isMember(request.resource.data.organizationId);
      allow read, update, delete: if isMember(resource.data.organizationId);
    }

    match /invites/{inviteId} {
      allow read, create, update: if isAuth();
    }
    
    match /taskTemplates/{templateId} {
      allow create: if isMember(request.resource.data.organizationId);
      allow read, update, delete: if isMember(resource.data.organizationId);
    }

    match /checklistTemplates/{templateId} {
      allow create: if isMember(request.resource.data.organizationId);
      allow read, update, delete: if isMember(resource.data.organizationId);
    }
    
    match /automations/{automationId} {
      allow create: if isMember(request.resource.data.organizationId);
      allow read, update, delete: if isMember(resource.data.organizationId);
    }
    
    match /sessions/{sessionId} {
      allow read, write: if isUser(resource.data.userId);
      allow create: if isUser(request.resource.data.userId);
    }

    match /apiKeys/{keyId} {
      allow create: if isMember(request.resource.data.organizationId);
      allow read, update, delete: if isMember(resource.data.organizationId); // Let server logic handle specific permissions
    }

    match /webhooks/{webhookId} {
      allow create: if isMember(request.resource.data.organizationId);
      allow read, update, delete: if isMember(resource.data.organizationId);
    }

    match /aiFeedback/{feedbackId} {
      allow create: if isAuth();
    }
    
    match /personalGoals/{goalId} {
       allow create: if isUser(request.resource.data.userId);
       allow read, update, delete: if isUser(resource.data.userId);
    }

    match /teamChallenges/{challengeId} {
       allow create: if isMember(request.resource.data.organizationId);
       allow read, update, delete: if isMember(resource.data.organizationId);
    }

    match /ideas/{ideaId} {
       allow create: if isMember(request.resource.data.organizationId);
       allow read, update, delete: if isMember(resource.data.organizationId);
    }

    match /notifications/{notificationId} {
       allow create: if isUser(request.resource.data.userId);
       allow read, write: if isUser(resource.data.userId);
    }
    
    match /activityFeed/{feedItemId} {
       allow create: if isMember(request.resource.data.organizationId);
       allow read: if isMember(resource.data.organizationId);
    }

    match /presence/{userId} {
      allow read, write: if isUser(userId);
    }
  }
}
