// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI agent that suggests the optimal task assignee.
 *
 * - suggestTaskAssignee - A function that suggests the optimal task assignee.
 * - SuggestTaskAssigneeInput - The input type for the suggestTaskAssignee function.
 * - SuggestTaskAssigneeOutput - The return type for the suggestTaskAssignee function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestTaskAssigneeInputSchema = z.object({
  taskDescription: z.string().describe('The description of the task to be assigned.'),
  availableAssignees: z.array(z.string()).describe('The list of available assignees for the task.'),
  taskHistory: z.array(z.object({
    assignee: z.string(),
    taskDescription: z.string(),
    completionTime: z.number().describe('The time taken to complete the task in hours.'),
  })).optional().describe('Historical data of task completion times for each assignee.'),
  assigneePreferences: z.record(z.string(), z.number().min(0).max(1)).optional().describe('A map of assignee names to their preference for the given task, from 0 to 1.'),
});
export type SuggestTaskAssigneeInput = z.infer<typeof SuggestTaskAssigneeInputSchema>;

const SuggestTaskAssigneeOutputSchema = z.object({
  suggestedAssignee: z.string().describe('The suggested assignee for the task.'),
  reasoning: z.string().describe('The reasoning behind the suggestion.'),
});
export type SuggestTaskAssigneeOutput = z.infer<typeof SuggestTaskAssigneeOutputSchema>;

export async function suggestTaskAssignee(input: SuggestTaskAssigneeInput): Promise<SuggestTaskAssigneeOutput> {
  return suggestTaskAssigneeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestTaskAssigneePrompt',
  input: {schema: SuggestTaskAssigneeInputSchema},
  output: {schema: SuggestTaskAssigneeOutputSchema},
  prompt: `You are an AI task assignment assistant. Your goal is to suggest the optimal assignee for a given task, considering their historical performance and preferences.

Task Description: {{{taskDescription}}}
Available Assignees: {{#each availableAssignees}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

{{#if taskHistory}}
Task History:
{{#each taskHistory}}
- Assignee: {{{assignee}}}, Task: {{{taskDescription}}}, Completion Time: {{{completionTime}}} hours
{{/each}}
{{else}}
No task history available.
{{/if}}

{{#if assigneePreferences}}
Assignee Preferences:
{{#each assigneePreferences}}
- Assignee: {{@key}}, Preference: {{{this}}}
{{/each}}
{{else}}
No assignee preferences available.
{{/if}}

Based on the task description, available assignees, task history, and assignee preferences, suggest the best assignee for the task and explain your reasoning. Be concise and avoid unnecessary details.
`, 
});

const suggestTaskAssigneeFlow = ai.defineFlow(
  {
    name: 'suggestTaskAssigneeFlow',
    inputSchema: SuggestTaskAssigneeInputSchema,
    outputSchema: SuggestTaskAssigneeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
