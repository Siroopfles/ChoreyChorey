rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwnerOfNewOrg(orgId, userId) {
      // Check if a document is being created in the same transaction, and if the user is the owner.
      return existsAfter(/databases/$(database)/documents/organizations/$(orgId)) &&
             getAfter(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == userId;
    }

    // Organizations
    match /organizations/{orgId} {
      // Only members of the organization can read it.
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.hasAny([orgId]);

      // Users can create an organization if they are the owner.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      
      // Only the owner can update the organization name.
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']);
      
      // Owner can delete their organization.
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // Teams
    match /teams/{teamId} {
        // Any member of the organization can read team data.
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.hasAny([resource.data.organizationId]);
        
        // Only an owner of the organization can create a team for it.
        allow create: if request.auth != null && get(/databases/$(database)/documents/organizations/$(request.resource.data.organizationId)).data.ownerId == request.auth.uid;
        
        // Only an owner of the organization can update a team (e.g., add/remove members).
        allow update: if request.auth != null && get(/databases/$(database)/documents/organizations/$(resource.data.organizationId)).data.ownerId == request.auth.uid;
        
        // Only the owner can delete a team.
        allow delete: if request.auth != null && get(/databases/$(database)/documents/organizations/$(resource.data.organizationId)).data.ownerId == request.auth.uid;
    }

    // Users
    match /users/{userId} {
      // Any authenticated user can read any user's profile (for avatars, names, etc.)
      allow read: if request.auth != null;
      
      // A user can only be created if the ID matches the authenticated user.
      allow create: if request.auth.uid == userId;

      // A user can update their own document under specific conditions.
      allow update: if request.auth.uid == userId &&
        // 1. Only allowed fields can be modified.
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatar', 'currentOrganizationId', 'organizationIds']) &&

        // 2. Condition for changing currentOrganizationId: The new ID must be an organization the user is already part of.
        (
          !request.resource.data.diff(resource.data).affectedKeys().has('currentOrganizationId') ||
          request.resource.data.organizationIds.has(request.resource.data.currentOrganizationId)
        ) &&

        // 3. Condition for changing organizationIds: This is ONLY allowed when adding a single new org that is being created in the same transaction.
        (
          !request.resource.data.diff(resource.data).affectedKeys().has('organizationIds') ||
          (
            request.resource.data.organizationIds.size() == resource.data.organizationIds.size() + 1 &&
            isOwnerOfNewOrg(request.resource.data.organizationIds.diff(resource.data.organizationIds).added().values()[0], request.auth.uid)
          )
        );
    }
    
    // Tasks
    match /tasks/{taskId} {
      // Allow read if the user is part of the organization.
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.hasAny([resource.data.organizationId]);
      
      // Allow create if the user is part of the organization.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.hasAny([request.resource.data.organizationId]);
      
      // Allow update if the user is part of the organization.
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.hasAny([resource.data.organizationId]);
      
      // Allow delete if the user is part of the organization.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.hasAny([resource.data.organizationId]);
    }
    
    // Notifications
    match /notifications/{notificationId} {
        // Users can only read, create, update, and delete their own notifications.
        allow read, write, delete: if request.auth != null && (request.resource.data.userId == request.auth.uid || resource.data.userId == request.auth.uid);
    }
  }
}
