
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isOrgMember(orgId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isAuth() && 
             'organizationIds' in userDoc.data &&
             orgId in userDoc.data.organizationIds;
    }

    function isOrgOwner(orgId) {
      let orgDoc = get(/databases/$(database)/documents/organizations/$(orgId));
      return isAuth() && orgDoc.data.ownerId == request.auth.uid;
    }

    // Rules for collections
    match /users/{userId} {
      allow read, update: if isUser(userId);
      // Anyone can create a user doc (signup) as long as it's for themselves
      allow create: if isUser(userId);
    }
    
    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId);
      allow create: if isUser(request.resource.data.ownerId);
      allow update: if isOrgOwner(orgId);
      allow delete: if isOrgOwner(orgId);
    }
    
    match /invites/{inviteId} {
      allow read: if resource.data.status == 'pending'; 
      allow create: if isOrgMember(request.resource.data.organizationId) && 
                      isUser(request.resource.data.inviterId);
      allow update: if isAuth() && resource.data.status == 'pending';
    }

    match /teams/{teamId} {
      function getOrgId() {
        // For new docs, check request.resource.data. For existing docs, check resource.data
        return request.resource.data.size() > 0 ? request.resource.data.organizationId : resource.data.organizationId;
      }
      allow read, create, update, delete: if isOrgMember(getOrgId());
    }

    match /taskTemplates/{templateId} {
       function getOrgId() {
        return request.resource.data.size() > 0 ? request.resource.data.organizationId : resource.data.organizationId;
      }
      allow read, delete: if isOrgMember(resource.data.organizationId);
      allow create: if isOrgMember(request.resource.data.organizationId) &&
                      isUser(request.resource.data.creatorId);
      allow update: if isOrgMember(resource.data.organizationId);
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if isUser(resource.data.userId);
      allow create: if isAuth(); // An authenticated user can create a notification for another user.
    }

    match /tasks/{taskId} {
      function getOrgId(doc) {
        return doc.data.organizationId;
      }
      
      allow read: if isOrgMember(getOrgId(resource)) && 
                    (resource.data.isPrivate == false || 
                     isUser(resource.data.creatorId) || 
                     isUser(resource.data.assigneeId));
      
      allow create: if isOrgMember(getOrgId(request.resource)) && 
                      isUser(request.resource.data.creatorId);
                      
      allow update: if isOrgMember(getOrgId(resource));
      
      allow delete: if isOrgMember(getOrgId(resource)) && 
                      (isUser(resource.data.creatorId) || isOrgOwner(getOrgId(resource)));
    }
  }
}
