
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    let ROLES = {
      'Owner': {
        'permissions': {
          'MANAGE_ORGANIZATION': true, 'MANAGE_ROLES': true, 'MANAGE_MEMBERS': true,
          'MANAGE_TEAMS': true, 'CREATE_TASK': true, 'EDIT_TASK': true,
          'DELETE_TASK': true, 'ASSIGN_TASK': true, 'VIEW_ALL_TASKS': true
        }
      },
      'Admin': {
        'permissions': {
          'MANAGE_ROLES': true, 'MANAGE_MEMBERS': true, 'MANAGE_TEAMS': true,
          'CREATE_TASK': true, 'EDIT_TASK': true, 'DELETE_TASK': true,
          'ASSIGN_TASK': true, 'VIEW_ALL_TASKS': true
        }
      },
      'Member': {
        'permissions': {
          'CREATE_TASK': true, 'EDIT_TASK': true, 'VIEW_ALL_TASKS': true
        }
      }
    };
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function getOrganization(orgId) {
        return get(/databases/$(database)/documents/organizations/$(orgId)).data;
    }
    
    function getRole(orgId) {
      let org = getOrganization(orgId);
      if (!('members' in org) || !(request.auth.uid in org.members)) {
        return 'none';
      }
      return org.members[request.auth.uid].role;
    }
    
    function hasPermission(orgId, permission) {
        let roleName = getRole(orgId);
        return roleName in ROLES && permission in ROLES[roleName].permissions;
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
    }

    match /organizations/{orgId} {
      allow read: if isSignedIn() && request.auth.uid in getOrganization(orgId).members;
      allow create: if isSignedIn() 
                    && request.resource.data.ownerId == request.auth.uid
                    && request.resource.data.members[request.auth.uid].role == 'Owner';
      allow update: if hasPermission(orgId, 'MANAGE_ORGANIZATION') || hasPermission(orgId, 'MANAGE_ROLES');
      allow delete: if getOrganization(orgId).ownerId == request.auth.uid;
    }
    
    match /teams/{teamId} {
        let orgId = resource.data.organizationId;
        allow read: if isSignedIn() && hasPermission(orgId, 'VIEW_ALL_TASKS');
        allow create: if isSignedIn() && hasPermission(request.resource.data.organizationId, 'MANAGE_TEAMS');
        allow update: if isSignedIn() && hasPermission(orgId, 'MANAGE_TEAMS');
        allow delete: if isSignedIn() && hasPermission(orgId, 'MANAGE_TEAMS');
    }

    match /invites/{inviteId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn()
                      && hasPermission(request.resource.data.organizationId, 'MANAGE_MEMBERS')
                      && request.resource.data.inviterId == request.auth.uid;
      allow update: if isSignedIn() && (isUser(request.resource.data.inviterId) || isUser(get(/databases/$(database)/documents/invites/$(inviteId)).data.acceptedBy));
      allow delete: if hasPermission(resource.data.organizationId, 'MANAGE_MEMBERS');
    }

    match /tasks/{taskId} {
      let task = resource.data;
      let orgId = task.organizationId;
      let incomingTask = request.resource.data;
      
      function canView() {
        return hasPermission(orgId, 'VIEW_ALL_TASKS') 
               && (task.isPrivate == false || task.creatorId == request.auth.uid || task.assigneeId == request.auth.uid);
      }
      
      function canEdit() {
        return hasPermission(orgId, 'EDIT_TASK')
               && (task.creatorId == request.auth.uid || task.assigneeId == request.auth.uid || getRole(orgId) != 'Member');
      }

      allow read: if isSignedIn() && canView();
      allow create: if isSignedIn() && hasPermission(incomingTask.organizationId, 'CREATE_TASK') && incomingTask.creatorId == request.auth.uid;
      allow update: if isSignedIn() && canEdit();
      allow delete: if isSignedIn() && hasPermission(orgId, 'DELETE_TASK') && canEdit();
    }

    match /taskTemplates/{templateId} {
        let orgId = resource.data.organizationId;
        allow read, write: if isSignedIn() && hasPermission(orgId, 'MANAGE_TEAMS');
    }
    
    match /notifications/{notificationId} {
        allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow create: if isSignedIn();
    }
  }
}
