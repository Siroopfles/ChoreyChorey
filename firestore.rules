rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ======== HELPER FUNCTIONS ========
    
    function isAuth() {
      return request.auth != null;
    }
    
    function getOrg(orgId) {
        return get(/databases/$(database)/documents/organizations/$(orgId));
    }

    function isOrgMember(userId, orgId) {
        let orgDoc = getOrg(orgId);
        return isAuth() &&
               exists(/databases/$(database)/documents/organizations/$(orgId)) &&
               userId in orgDoc.data.members;
    }

    function getUserRole(userId, orgId) {
      if (!isOrgMember(userId, orgId)) {
        return null;
      }
      return getOrg(orgId).data.members[userId].role;
    }

    function isOrgAdmin(userId, orgId) {
        let role = getUserRole(userId, orgId);
        return role == 'Admin' || role == 'Owner';
    }

    function isOrgOwner(userId, orgId) {
        return getUserRole(userId, orgId) == 'Owner';
    }


    // ======== COLLECTION RULES ========

    match /users/{userId} {
      allow read: if isAuth();
      allow update: if isAuth() && request.auth.uid == userId;
      // Disallow create/delete through client
      allow create, delete: if false;
    }

    match /organizations/{orgId} {
      allow get: if isOrgMember(request.auth.uid, orgId);
      allow list: if isAuth() && request.auth.uid in resource.data.members;
      allow create: if isAuth() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOrgOwner(request.auth.uid, orgId);
      allow delete: if isOrgOwner(request.auth.uid, orgId);
    }

    match /tasks/{taskId} {
      // Allow read if user is a member of the organization
      allow get, list: if isOrgMember(request.auth.uid, resource.data.organizationId);

      // Allow create if user is a member and the creator
      allow create: if isOrgMember(request.auth.uid, request.resource.data.organizationId) &&
                       request.resource.data.creatorId == request.auth.uid;
      
      // Allow update if user is a member (more granular checks can be added, e.g., only assignee or admin)
      allow update: if isOrgMember(request.auth.uid, resource.data.organizationId);
      
      // Allow delete if user is an admin/owner of the organization
      allow delete: if isOrgAdmin(request.auth.uid, resource.data.organizationId);
    }
    
    match /invites/{inviteId} {
        allow get: if isAuth(); // Anyone authenticated can check an invite
        allow create: if isOrgAdmin(request.auth.uid, request.resource.data.organizationId) &&
                         request.resource.data.inviterId == request.auth.uid;
        allow update: if isOrgAdmin(request.auth.uid, resource.data.organizationId); // To accept/reject
        allow delete: if isOrgAdmin(request.auth.uid, resource.data.organizationId);
    }

    match /teams/{teamId} {
        allow get, list: if isOrgMember(request.auth.uid, resource.data.organizationId);
        allow create, update, delete: if isOrgAdmin(request.auth.uid, resource.data.organizationId);
    }
    
    match /taskTemplates/{templateId} {
        allow get, list: if isOrgMember(request.auth.uid, resource.data.organizationId);
        allow create: if isOrgMember(request.auth.uid, request.resource.data.organizationId);
        allow update, delete: if isOrgAdmin(request.auth.uid, resource.data.organizationId);
    }

    match /notifications/{notificationId} {
        allow read, update: if isAuth() && request.auth.uid == resource.data.userId;
        allow create: if isAuth(); // Created by server-side actions/triggers
        allow delete: if false;
    }
  }
}
