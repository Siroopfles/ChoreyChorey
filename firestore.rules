rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================
    // Helper Functions
    // =============================================

    function isOrgMember(orgId, userId) {
      let orgDoc = get(/databases/$(database)/documents/organizations/$(orgId));
      // Safely check if 'members' field exists and if the userId is a key in the 'members' map.
      return 'members' in orgDoc.data && userId in orgDoc.data.members;
    }

    function getOrgRole(orgId, userId) {
      let orgDoc = get(/databases/$(database)/documents/organizations/$(orgId));
      if ('members' in orgDoc.data && userId in orgDoc.data.members) {
        return orgDoc.data.members[userId].role;
      }
      return null;
    }
    
    function isOrgAdmin(orgId, userId) {
      let role = getOrgRole(orgId, userId);
      return role == 'Admin' || role == 'Owner';
    }

    function isOrgOwner(orgId, userId) {
      return get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == userId;
    }

    // =============================================
    // Collection Rules
    // =============================================

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId, request.auth.uid);
      allow create: if request.resource.data.ownerId == request.auth.uid;
      allow update: if isOrgOwner(orgId, request.auth.uid);
      allow delete: if isOrgOwner(orgId, request.auth.uid);
    }
    
    match /teams/{teamId} {
      allow read, write: if isOrgMember(request.resource.data.organizationId, request.auth.uid);
    }
    
    match /invites/{inviteId} {
      allow read: if isOrgMember(resource.data.organizationId, request.auth.uid) || request.auth == null; // Allow unauthenticated users to read for invite page
      
      // Only Admins or Owners can create invites.
      allow create: if isOrgAdmin(request.resource.data.organizationId, request.auth.uid)
                      && request.resource.data.inviterId == request.auth.uid;
      
      // Only authenticated users can accept an invite. Logic is in transaction.
      allow update: if request.auth != null;
                      
      allow delete: if isOrgAdmin(resource.data.organizationId, request.auth.uid);
    }

    match /tasks/{taskId} {
      // Allow read if user is part of the organization.
      // Private tasks are filtered on the client-side context, which is safe
      // as long as the organization rule is enforced here.
      allow read: if isOrgMember(resource.data.organizationId, request.auth.uid);
      
      // Allow create if user is part of the organization and the creatorId matches.
      allow create: if isOrgMember(request.resource.data.organizationId, request.auth.uid)
                      && request.resource.data.creatorId == request.auth.uid;
      
      // Allow update if user is part of the organization.
      // More granular control (e.g., only assignee can update) can be added if needed.
      allow update, delete: if isOrgMember(resource.data.organizationId, request.auth.uid);
    }
    
     match /taskTemplates/{templateId} {
      allow read, write: if isOrgMember(request.resource.data.organizationId, request.auth.uid);
    }
    
    match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
    }
  }
}
