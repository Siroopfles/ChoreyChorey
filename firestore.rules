rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function getOrgRole(orgId, userId) {
      // Safely access the role from the organization document.
      // Returns the role string or null if not found.
      let orgData = get(/databases/$(database)/documents/organizations/$(orgId)).data;
      if (!('members' in orgData) || !(userId in orgData.members)) {
        return null;
      }
      return orgData.members[userId].role;
    }

    function isOrgMember(orgId, userId) {
      // Checks if a user is part of an organization's members map.
      return getOrgRole(orgId, userId) != null;
    }

    function isOrgAdmin(orgId, userId) {
      let role = getOrgRole(orgId, userId);
      return role == 'Admin' || role == 'Owner';
    }

    function isOrgOwner(orgId, userId) {
      return getOrgRole(orgId, userId) == 'Owner';
    }


    // Collection Rules

    match /users/{userId} {
      allow read: if isAuth();
      allow update: if isAuth() && request.auth.uid == userId;
      allow create: if isAuth() && request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      allow read: if isAuth() && isOrgMember(orgId, request.auth.uid);
      
      allow create: if isAuth() &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.members[request.auth.uid].role == 'Owner';
      
      allow update: if isAuth() && isOrgAdmin(orgId, request.auth.uid) &&
                       request.resource.data.ownerId == resource.data.ownerId &&
                       (getOrgRole(orgId, resource.data.ownerId) == 'Owner' ||
                        request.resource.data.members[resource.data.ownerId].role == 'Owner');
    }
    
    match /tasks/{taskId} {
      function taskOrgId() {
        return resource.data.organizationId;
      }
      
      function incomingTaskOrgId() {
        // Use this for create operations where `resource` doesn't exist yet.
        return request.resource.data.organizationId;
      }

      allow read: if isAuth() && isOrgMember(taskOrgId(), request.auth.uid) &&
                     (resource.data.isPrivate == false || 
                      resource.data.creatorId == request.auth.uid || 
                      resource.data.assigneeId == request.auth.uid);
                      
      allow create: if isAuth() && isOrgMember(incomingTaskOrgId(), request.auth.uid) &&
                       request.resource.data.creatorId == request.auth.uid;
                       
      allow update, delete: if isAuth() && isOrgMember(taskOrgId(), request.auth.uid);
    }
    
    match /teams/{teamId} {
       function teamOrgId() {
        return resource.data.organizationId;
      }
      
      function incomingTeamOrgId() {
        return request.resource.data.organizationId;
      }
      
      allow read: if isAuth() && isOrgMember(teamOrgId(), request.auth.uid);
      
      allow create: if isAuth() && isOrgAdmin(incomingTeamOrgId(), request.auth.uid);
      allow update, delete: if isAuth() && isOrgAdmin(teamOrgId(), request.auth.uid);
    }

    match /taskTemplates/{templateId} {
      function templateOrgId() {
        return resource.data.organizationId;
      }
      
      allow read, write: if isAuth() && isOrgMember(templateOrgId(), request.auth.uid);
    }

    match /invites/{inviteId} {
      allow read: if isAuth(); 
      
      allow create: if isAuth() && 
                       isOrgAdmin(request.resource.data.organizationId, request.auth.uid) &&
                       request.resource.data.inviterId == request.auth.uid &&
                       request.resource.data.status == 'pending';
                       
      allow update: if isAuth() &&
                       request.resource.data.status == 'accepted' &&
                       resource.data.status == 'pending' &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']);
    }
    
    match /notifications/{notificationId} {
        allow read, write: if isAuth() && resource.data.userId == request.auth.uid;
    }
  }
}
