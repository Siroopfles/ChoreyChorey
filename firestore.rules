rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function userInOrg(orgId) {
        return isSignedIn() && orgId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds;
    }

    // USERS
    match /users/{userId} {
      allow read: if isSignedIn();
      
      // Allow user creation
      allow create: if isUser(userId);

      // Allow a user to update their own profile under specific conditions
      allow update: if isUser(userId) && (
        // Scenario 1: Updating name, avatar, or current org
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['name', 'avatar', 'currentOrganizationId']) &&
          (request.resource.data.currentOrganizationId == null || userInOrg(request.resource.data.currentOrganizationId))
        ) ||
        // Scenario 2: Creating the first organization
        (
          request.resource.data.organizationIds.size() == resource.data.organizationIds.size() + 1 &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['organizationIds', 'currentOrganizationId']) &&
          // Check that the new org is being created in the same transaction
          getAfter(/databases/$(database)/documents/organizations/$(request.resource.data.currentOrganizationId)).data.ownerId == request.auth.uid
        )
      );
    }
    
    // ORGANIZATIONS
    match /organizations/{orgId} {
      allow read: if userInOrg(orgId);
      allow create: if request.resource.data.ownerId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    // TEAMS
    match /teams/{teamId} {
        allow read: if userInOrg(request.resource.data.organizationId);
        allow create, update, delete: if userInOrg(request.resource.data.organizationId);
    }

    // TASKS
    match /tasks/{taskId} {
      // Allow read if user is in the org and task is not private, or if user is involved.
      allow read: if userInOrg(resource.data.organizationId) && 
                      (!resource.data.isPrivate || resource.data.assigneeId == request.auth.uid || resource.data.creatorId == request.auth.uid);
                      
      // Allow create/update/delete if user is in the org.
      allow write: if userInOrg(request.resource.data.organizationId);
    }
    
    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, write: if isUser(request.resource.data.userId);
    }

    // TASK TEMPLATES
    match /taskTemplates/{templateId} {
        allow read, write: if userInOrg(request.resource.data.organizationId);
    }
  }
}
