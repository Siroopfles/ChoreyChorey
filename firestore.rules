rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isMember(orgId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.hasAny([orgId]);
    }
    
    function getRole(orgId) {
    	return get(/databases/$(database)/documents/organizations/$(orgId)).data.members[request.auth.uid].role;
    }
    
    function hasPermission(orgId, permission) {
    	let roleId = getRole(orgId);
      // This is a simplified check. A full implementation would check the permissions array for the role.
      // For now, we allow Owner and Admin full access.
      return roleId == 'Owner' || roleId == 'Admin';
    }

    function isGuest(orgId) {
        return getRole(orgId) == 'Guest';
    }
    
    function isGuestOfProject(orgId, projectId) {
        let guestAccess = get(/databases/$(database)/documents/organizations/$(orgId)).data.settings.guestAccess;
        return guestAccess != null && request.auth.uid in guestAccess && guestAccess[request.auth.uid].projectIds.hasAny([projectId]);
    }
    
    match /users/{userId} {
      allow read;
      allow write: if request.auth.uid == userId;
    }
    
    match /organizations/{orgId} {
    	allow read: if isMember(orgId);
      allow write: if hasPermission(orgId, 'MANAGE_ORGANIZATION');
    }
    
    match /tasks/{taskId} {
    	allow read: if isMember(resource.data.organizationId) || 
                       (isGuest(resource.data.organizationId) && 
                        resource.data.projectId != null && 
                        isGuestOfProject(resource.data.organizationId, resource.data.projectId));
      allow create: if isMember(request.resource.data.organizationId);
      allow update: if isMember(resource.data.organizationId);
      allow delete: if hasPermission(resource.data.organizationId, 'DELETE_TASK');
    }
    
    match /taskTemplates/{templateId} {
      allow read: if isMember(resource.data.organizationId);
      allow create, update, delete: if hasPermission(request.resource.data.organizationId, 'MANAGE_TEMPLATES');
    }

    match /projects/{projectId} {
        allow read: if isMember(resource.data.organizationId) || 
                       isGuestOfProject(resource.data.organizationId, projectId);
        allow create, update, delete: if hasPermission(request.resource.data.organizationId, 'MANAGE_PROJECTS');
    }

    match /teams/{teamId} {
        allow read: if isMember(resource.data.organizationId);
        allow create, update, delete: if hasPermission(request.resource.data.organizationId, 'MANAGE_TEAMS');
    }
    
    match /invites/{inviteId} {
        allow read, write: if request.auth != null;
    }

    match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    match /personalGoals/{goalId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    match /teamChallenges/{challengeId} {
      allow read: if isMember(resource.data.organizationId);
      allow create, update, delete: if hasPermission(request.resource.data.organizationId, 'MANAGE_TEAMS');
    }
    
     match /ideas/{ideaId} {
      allow read: if isMember(resource.data.organizationId);
      allow create: if isMember(request.resource.data.organizationId);
      allow update: if isMember(resource.data.organizationId); // Allow upvoting, status change is controlled by server action
    }
    
    match /activityFeed/{itemId} {
      allow read: if isMember(resource.data.organizationId);
      allow create: if request.auth != null;
    }

    match /webhooks/{webhookId} {
      allow read, write: if hasPermission(resource.data.organizationId, 'MANAGE_INTEGRATIONS');
    }

    match /apiKeys/{keyId} {
      allow read, write, delete: if hasPermission(resource.data.organizationId, 'MANAGE_API_KEYS');
    }
    
    match /sessions/{sessionId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }
  }
}
