rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getRole(userId, orgId) {
        let orgDoc = get(/databases/$(database)/documents/organizations/$(orgId));
        // Check if org exists, has members map, and user entry exists. Default to null if not.
        if (orgDoc.data != null && 'members' in orgDoc.data && userId in orgDoc.data.members) {
            return orgDoc.data.members[userId].role;
        }
        return null;
    }

    function hasPermission(permission, orgId) {
      if (orgId == null) {
        return false;
      }
      let role = getRole(request.auth.uid, orgId);
      let permissions = {
          'Owner': ['MANAGE_ORGANIZATION', 'MANAGE_ROLES', 'MANAGE_MEMBERS', 'MANAGE_TEAMS', 'CREATE_TASK', 'EDIT_TASK', 'DELETE_TASK', 'ASSIGN_TASK', 'VIEW_ALL_TASKS'],
          'Admin': ['MANAGE_ROLES', 'MANAGE_MEMBERS', 'MANAGE_TEAMS', 'CREATE_TASK', 'EDIT_TASK', 'DELETE_TASK', 'ASSIGN_TASK', 'VIEW_ALL_TASKS'],
          'Member': ['CREATE_TASK', 'EDIT_TASK', 'VIEW_ALL_TASKS']
      };
      
      if (role == null) {
          return false;
      }
      
      return permission in permissions[role];
    }
    
    // =================================
    // Collection Rules
    // =================================
    
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isUser(userId);
    }

    match /organizations/{orgId} {
      // User can read an org if they are a member
      allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.members;
      // User can create an org, rules on user doc will link it
      allow create: if isSignedIn();
      // Only users with permission in *this* org can update/delete it
      allow update: if hasPermission('MANAGE_ORGANIZATION', orgId);
      allow delete: if hasPermission('MANAGE_ORGANIZATION', orgId);
    }

    match /teams/{teamId} {
      // Org ID for read/update/delete comes from the existing document
      allow read, update, delete: if hasPermission('MANAGE_TEAMS', resource.data.organizationId);
      // Org ID for create comes from the new document data
      allow create: if hasPermission('MANAGE_TEAMS', request.resource.data.organizationId);
    }

    match /tasks/{taskId} {
      allow read: if hasPermission('VIEW_ALL_TASKS', resource.data.organizationId);
      allow create: if hasPermission('CREATE_TASK', request.resource.data.organizationId);
      // Further logic needed for "own tasks only" for Members, but this is a start
      allow update: if hasPermission('EDIT_TASK', resource.data.organizationId);
      allow delete: if hasPermission('DELETE_TASK', resource.data.organizationId);
    }

    match /taskTemplates/{templateId} {
      allow read, update, delete: if hasPermission('MANAGE_TEAMS', resource.data.organizationId);
      allow create: if hasPermission('MANAGE_TEAMS', request.resource.data.organizationId);
    }
    
    match /invites/{inviteId} {
      allow read: if isSignedIn();
      allow create: if hasPermission('MANAGE_MEMBERS', request.resource.data.organizationId) && isUser(request.resource.data.inviterId);
      // Anyone signed in can update (to accept) an invite. The transaction logic handles security.
      allow update: if isSignedIn();
    }

    match /notifications/{notificationId} {
        allow read, write: if isUser(request.resource.data.userId);
    }
  }
}
