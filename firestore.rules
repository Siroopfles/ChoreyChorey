
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isOrgMember(orgId) {
      // Safely access members map. Return false if members map doesn't exist.
      let members = get(/databases/$(database)/documents/organizations/$(orgId)).data.members;
      return members != null && request.auth.uid in members;
    }

    function getOrgRole(orgId) {
       let members = get(/databases/$(database)/documents/organizations/$(orgId)).data.members;
       if (members != null && request.auth.uid in members) {
         return members[request.auth.uid].role;
       }
       return ''; // Return empty string if no role found
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId);
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if getOrgRole(orgId) == 'Owner' || getOrgRole(orgId) == 'Admin';
    }

    match /teams/{teamId} {
      let orgId = request.resource.data.organizationId;
      allow read, create, update, delete: if getOrgRole(orgId) == 'Owner' || getOrgRole(orgId) == 'Admin';
    }

    match /tasks/{taskId} {
      let orgId = resource.data.organizationId;
      allow read: if isOrgMember(orgId);
      allow create: if isOrgMember(request.resource.data.organizationId);
      allow update: if isOrgMember(orgId);
      allow delete: if getOrgRole(orgId) == 'Owner' || getOrgRole(orgId) == 'Admin';
    }
    
    match /taskTemplates/{templateId} {
        let orgId = request.resource.data.organizationId;
        allow read, create, update, delete: if isOrgMember(orgId);
    }

    match /invites/{inviteId} {
      let orgId = request.resource.data.organizationId;
      // Anyone logged in can read an invite to get its details.
      allow read: if request.auth != null;
      // Only an Owner or Admin of the organization can create an invite.
      allow create: if (getOrgRole(orgId) == 'Owner' || getOrgRole(orgId) == 'Admin') && request.resource.data.inviterId == request.auth.uid;
      // The user accepting the invite can update it to 'accepted'.
      allow update: if request.auth != null;
    }
    
    match /notifications/{notificationId} {
        allow read, update, delete: if request.auth.uid == resource.data.userId;
        allow create: if request.auth != null; // Notifications are created server-side (implicitly trusted) or by users for themselves.
    }
  }
}
