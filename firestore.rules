rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is a member of a specific organization
    function isOrgMember(orgId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             orgId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds;
    }
    
    // Helper function to check if a user is the owner of an organization
    function isOrgOwner(orgId) {
      return get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    // Users can read/update their own profile.
    // Other authenticated users can also view profiles (for avatars, names etc.)
    match /users/{userId} {
      allow get: if request.auth != null;
      allow update: if request.auth.uid == userId;
    }

    // Organizations can be read by their members and updated only by the owner.
    match /organizations/{orgId} {
      allow get: if isOrgMember(orgId);
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update, delete: if isOrgOwner(orgId);
    }

    // Teams can be read/written by members of the organization.
    match /teams/{teamId} {
        let orgId = get(/databases/$(database)/documents/teams/$(teamId)).data.organizationId;
        allow read, write: if isOrgMember(orgId);
    }
    
    // Tasks can be read/written by members of the organization.
    // Private tasks have special rules.
    match /tasks/{taskId} {
      let task = resource.data;
      let orgId = task.organizationId;
      
      allow read, write: if isOrgMember(orgId) &&
                           (task.isPrivate == false ||
                            task.creatorId == request.auth.uid ||
                            task.assigneeId == request.auth.uid);
    }

    // Task Templates can be read/written by members of the organization.
    match /taskTemplates/{templateId} {
        let orgId = get(/databases/$(database)/documents/taskTemplates/$(templateId)).data.organizationId;
        allow read, write: if isOrgMember(orgId);
    }

    // Invites
    match /invites/{inviteId} {
        // Anyone can read a pending invite to get org details before signing up
        allow get: if resource.data.status == 'pending';
        
        // Only an authenticated member of the organization can create an invite.
        // The inviter must be the person making the request.
        allow create: if request.auth.uid == request.resource.data.inviterId &&
                         isOrgMember(request.resource.data.organizationId);
                         
        // An authenticated user can accept an invite, changing its status.
        allow update: if request.auth.uid != null &&
                         resource.data.status == 'pending' &&
                         request.resource.data.status == 'accepted';
    }

    // Notifications can only be accessed by the user they are for.
    match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == resource.data.userId;
    }
  }
}
