rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOrgMember(orgId) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.hasAny([orgId]);
    }
    
    match /users/{userId} {
      allow read: if isAuthenticated() && (
                    request.auth.uid == userId || 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.currentOrganizationId != null &&
                    get(/databases/$(database)/documents/users/$(userId)).data.organizationIds.hasAny(
                      [get(/databases/$(database)/documents/users/$(request.auth.uid)).data.currentOrganizationId]
                    )
                  );
      allow create: if request.auth.uid == userId;

      allow update: if request.auth.uid == userId && (
        // Case 1: Normal profile update (e.g., name, avatar) or switching current organization.
        // The list of organizations the user belongs to does not change.
        // If currentOrganizationId changes, it must be to an organization they are already a member of.
        (
          request.resource.data.organizationIds == resource.data.organizationIds &&
          (
            request.resource.data.currentOrganizationId == resource.data.currentOrganizationId ||
            request.resource.data.currentOrganizationId in resource.data.organizationIds
          )
        ) 
        ||
        // Case 2: The special transaction for creating an organization and joining it.
        (
          request.resource.data.organizationIds.size() == resource.data.organizationIds.size() + 1 &&
          request.resource.data.organizationIds.containsAll(resource.data.organizationIds) &&
          let newOrgId = request.resource.data.organizationIds.diff(resource.data.organizationIds).added()[0];
          getAfter(/databases/$(database)/documents/organizations/$(newOrgId)).data.ownerId == request.auth.uid &&
          request.resource.data.currentOrganizationId == newOrgId
        )
      );
    }
    
    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId);
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    match /teams/{teamId} {
        allow read, write: if isOrgMember(get(/databases/$(database)/documents/teams/$(teamId)).data.organizationId);
    }
    
    match /tasks/{taskId} {
      // For reads, we use the existing resource data. For writes, we use the incoming request data.
      allow read: if isOrgMember(resource.data.organizationId);
      allow write: if isOrgMember(request.resource.data.organizationId);
    }

    match /notifications/{notificationId} {
      // For reads, we use the existing resource data. For writes, we use the incoming request data.
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
  }
}
