
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is a member of a specific organization.
    function isOrgMember(orgId) {
        return request.auth != null && orgId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds;
    }
    
    // Rules for user documents
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;

      // This complex rule is necessary for security. It allows a user to:
      // 1. Update their own name and avatar.
      // 2. Switch their active organization to one they are already a member of.
      // 3. Securely add a new organization ID to their profile, but ONLY when that organization
      //    is being created in the same transaction with the user as the owner.
      allow update: if request.auth.uid == userId && (
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatar'])) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentOrganizationId']) && isOrgMember(request.resource.data.currentOrganizationId)) ||
        (
            request.resource.data.organizationIds.size() == resource.data.organizationIds.size() + 1 &&
            request.resource.data.currentOrganizationId == request.resource.data.organizationIds.diff(resource.data.organizationIds).added().get(0) &&
            getAfter(/databases/$(database)/documents/organizations/$(request.resource.data.currentOrganizationId)).data.ownerId == request.auth.uid
        )
      );
    }

    // Rules for organization documents
    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId);
      allow create: if request.resource.data.ownerId == request.auth.uid;
      // Organizations are immutable for now to prevent accidental changes.
      allow update: if false; 
    }
    
    // Rules for team documents
    match /teams/{teamId} {
        // Any member of the organization can read, create, update, or delete teams.
        // The `||` is needed to handle create operations where `resource.data` is null.
        allow read, write: if isOrgMember(resource.data.organizationId) || isOrgMember(request.resource.data.organizationId);
    }
    
    // Rules for task documents
    match /tasks/{taskId} {
        // Any member of the organization can read or write tasks.
        // Private tasks are handled by client-side filtering.
        allow read, write: if isOrgMember(resource.data.organizationId) || isOrgMember(request.resource.data.organizationId);
    }

    // Rules for notification documents
    match /notifications/{notificationId} {
        // Users can only manage their own notifications.
        allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    // Rules for task template documents
    match /taskTemplates/{templateId} {
      // Any member of the organization can read or write task templates.
      allow read, write: if isOrgMember(resource.data.organizationId) || isOrgMember(request.resource.data.organizationId);
    }
  }
}
