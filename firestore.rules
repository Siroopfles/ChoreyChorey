
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isMember(orgId, userId) {
      return get(/databases/$(database)/documents/organizations/$(orgId)).data.members[userId] != null;
    }

    function isOwner(orgId, userId) {
      return get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == userId;
    }

    // Rules for collections
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /invites/{inviteId} {
        allow read, create: if request.auth != null;
        allow update: if request.auth != null && getAfter(/databases/$(database)/documents/invites/$(inviteId)).data.status == 'accepted';
    }

    match /organizations/{orgId} {
      allow read: if request.auth != null && isMember(orgId, request.auth.uid);
      allow create: if request.auth != null; // User must be in the members list on creation
      allow update: if request.auth != null && isMember(orgId, request.auth.uid);
      allow delete: if request.auth != null && isOwner(orgId, request.auth.uid);
    }
    
    match /{collection}/{docId} {
        allow read, write: if request.auth != null && isMember(request.resource.data.organizationId, request.auth.uid);
    }

    match /aiFeedback/{feedbackId} {
      allow create: if request.auth != null && isMember(request.resource.data.organizationId, request.auth.uid);
    }
  }
}
