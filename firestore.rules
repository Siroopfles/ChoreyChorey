rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    
    // Checks if the requesting user is a member of the given organization.
    // It does this by reading the user's own document, which is always allowed.
    function isOrgMember(orgId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return request.auth != null && orgId in userDoc.data.organizationIds;
    }
    
    // Checks if the requesting user is the owner of the given organization.
    function isOrgOwner(orgId) {
       return request.auth != null && get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      // A user can read an organization's document if they are listed as a member in that document.
      // This is a direct check and doesn't cause recursion.
      allow read: if request.auth.uid in resource.data.members;
      // Only the owner can modify the organization document itself.
      allow update: if isOrgOwner(orgId);
      // Create is handled by backend logic (invites, initial creation).
    }

    match /tasks/{taskId} {
      // To create a task, the user must be a member of the organization specified in the *new* task data.
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
      
      // To read/update/delete, the user must be a member of the organization the *existing* task belongs to.
      // Additional read logic: must not be private, unless creator or assignee.
      allow read: if isOrgMember(resource.data.organizationId) && (resource.data.isPrivate == false || request.auth.uid == resource.data.creatorId || request.auth.uid in resource.data.assigneeIds);
      allow update, delete: if isOrgMember(resource.data.organizationId); // Backend actions handle finer-grained permissions
    }

    match /projects/{projectId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }
    
    match /teams/{teamId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }
    
    match /invites/{inviteId} {
      allow read: if true; // Invites are read by ID, public by nature.
      // Create/update can only be done via server actions which run with elevated privileges if needed,
      // or checked via hasPermission helper. Basic check here.
      allow create, update: if request.auth != null;
    }
    
    match /taskTemplates/{templateId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /checklistTemplates/{templateId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }
    
    match /automations/{automationId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

     match /scheduledReports/{reportId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }
    
    match /sessions/{sessionId} {
      allow read, create, update: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /apiKeys/{keyId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /webhooks/{webhookId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /aiFeedback/{feedbackId} {
      allow create: if request.auth != null;
    }
    
    match /personalGoals/{goalId} {
       allow create: if request.auth.uid == request.resource.data.userId;
       allow read, update, delete: if request.auth.uid == resource.data.userId;
    }

    match /teamChallenges/{challengeId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /ideas/{ideaId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update: if isOrgMember(resource.data.organizationId); // Update is for voting, simple check is fine.
    }

    match /notifications/{notificationId} {
       allow create: if request.auth.uid == request.resource.data.userId;
       allow read, update, delete: if request.auth.uid == resource.data.userId;
    }
    
    match /activityFeed/{feedItemId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read: if isOrgMember(resource.data.organizationId);
    }

    match /presence/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth.uid == userId;
    }
  }
}
