rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isOrgMember(orgId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.hasAny([orgId]);
    }
    
    function isOrgOwner(orgId) {
    	return get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }
    
    match /users/{userId} {
      // User can create their own profile document
      allow create: if request.auth.uid == userId;
      // User can read their own profile
      allow read: if request.auth.uid == userId;
      // User can update their own profile, but not change organization relations directly
      allow update: if request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      // User can read an organization if they are a member of it
      allow read: if isOrgMember(orgId);
      // User can create an organization if they are the owner
      allow create: if request.auth.uid != null && request.resource.data.ownerId == request.auth.uid;
      // Only the owner can update the organization details (e.g. name)
      allow update: if isOrgOwner(orgId);
    }
    
    match /teams/{teamId} {
        // Any org member can read team data
        allow read: if isOrgMember(get(/databases/$(database)/documents/teams/$(teamId)).data.organizationId);
        // Any org member can create or update a team
        allow write: if isOrgMember(request.resource.data.organizationId);
    }

    match /tasks/{taskId} {
        function isTaskVisible() {
          let taskData = resource.data;
          let isMember = isOrgMember(taskData.organizationId);
          // Private tasks are only visible to assignee or creator
          return isMember && (!taskData.isPrivate || taskData.assigneeId == request.auth.uid || taskData.creatorId == request.auth.uid);
        }

        allow read: if isTaskVisible();
        // Any org member can create a task for that org
        allow create: if isOrgMember(request.resource.data.organizationId);
        // Any org member can update a task in that org
        allow update: if isOrgMember(resource.data.organizationId);
        // Any org member can delete a task in that org
        allow delete: if isOrgMember(resource.data.organizationId);
    }
    
    match /taskTemplates/{templateId} {
        allow read, write: if isOrgMember(get(/databases/$(database)/documents/taskTemplates/$(templateId)).data.organizationId);
    }
    
    match /notifications/{notificationId} {
        allow read, write: if get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId == request.auth.uid;
    }
    
    match /invites/{inviteId} {
    	allow read, create: if request.auth.uid != null;
      allow update: if request.auth.uid != null && resource.data.status == 'pending';
    }
  }
}
