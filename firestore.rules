
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOrgMember(orgId) {
      // Check if the user document exists and the user is part of the given organization.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             orgId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds;
    }
    
    match /users/{userId} {
      // A user can create their own account document.
      allow create: if request.auth.uid == userId;
      // A user can read their own profile. Other members of an org can also read profiles.
      allow read: if request.auth.uid == userId;
      // A user can update their own profile.
      allow update: if request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      // An authenticated user can create an organization, setting themselves as owner.
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.ownerId;
      // Only members of the organization can read or update it.
      allow read, update: if isOrgMember(orgId);
    }
    
    match /teams/{teamId} {
      // Organization members can manage teams within that organization.
      allow read, update, delete: if isOrgMember(get(/databases/$(database)/documents/teams/$(teamId)).data.organizationId);
      allow create: if isOrgMember(request.resource.data.organizationId);
    }
    
    match /tasks/{taskId} {
      // Read/write access is granted to members of the task's organization.
      allow read, update, delete: if isOrgMember(resource.data.organizationId);
      allow create: if isOrgMember(request.resource.data.organizationId);
    }
    
    match /notifications/{notificationId} {
      // Any authenticated user can create notifications (server actions do this on behalf of users).
      allow create: if request.auth.uid != null;
      // Only the recipient can read, update, or delete their notifications.
      allow read, update, delete: if request.auth.uid == resource.data.userId;
    }
  }
}
