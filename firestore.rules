
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is a member of an organization
    function isOrgMember(orgId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             orgId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds;
    }
    
    // Helper function to check if a user is the owner of an organization
    function isOrgOwner(orgId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/organizations/$(orgId)) &&
             get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    // Users can read their own document and update specific fields.
    match /users/{userId} {
      allow get: if request.auth.uid == userId || isOrgMember(get(/databases/$(database)/documents/users/$(userId)).data.currentOrganizationId);
      allow list: if request.auth != null;
      allow update: if request.auth.uid == userId;
    }
    
    // Organizations can be read by their members and updated/deleted by their owner.
    match /organizations/{orgId} {
      allow get, list: if isOrgMember(orgId);
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isOrgOwner(orgId) && request.resource.data.keys().hasOnly(['name']);
      allow delete: if isOrgOwner(orgId);
    }

    // Tasks can be managed by members of the organization.
    match /tasks/{taskId} {
      allow read, write: if isOrgMember(resource.data.organizationId);
      allow create: if isOrgMember(request.resource.data.organizationId) && request.auth.uid == request.resource.data.creatorId;
    }
    
    // Teams can be managed by members of the organization.
    match /teams/{teamId} {
      allow read, write: if isOrgMember(resource.data.organizationId);
      allow create: if isOrgMember(request.resource.data.organizationId);
    }

    // Task Templates can be managed by members of the organization.
    match /taskTemplates/{templateId} {
        allow read, write: if isOrgMember(resource.data.organizationId);
        allow create: if isOrgMember(request.resource.data.organizationId) && request.auth.uid == request.resource.data.creatorId;
    }

    // Invites can be created by organization members.
    // Invites can be read by anyone (to get details) but only updated by the user accepting it.
    match /invites/{inviteId} {
      allow read;
      allow create: if isOrgMember(request.resource.data.organizationId) && request.auth.uid == request.resource.data.inviterId;
      allow update: if request.auth.uid != null && resource.data.status == 'pending';
    }

    // Notifications are private to the user.
    match /notifications/{notificationId} {
      allow read, write: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.userId;
    }
  }
}
