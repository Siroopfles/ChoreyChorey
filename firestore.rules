
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the requesting user is a member of an organization.
    // It verifies that the organization's ID is present in the user's 'organizationIds' array.
    function isOrgMember(orgId) {
      return orgId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds;
    }
    
    // USERS
    match /users/{userId} {
      // Users can read their own profile. Other authenticated users can also read it to get names/avatars.
      allow read: if request.auth != null; 
      // Users can only update their own profile data.
      allow update: if request.auth.uid == userId;
    }
    
    // ORGANIZATIONS
    match /organizations/{orgId} {
      // Members of an organization can read its details.
      allow read: if request.auth != null && isOrgMember(orgId);
      // An organization can only be created by its designated owner.
      allow create: if request.auth.uid == request.resource.data.ownerId;
      // Only the owner can update the organization's properties (e.g., its name).
      allow update: if request.auth.uid == resource.data.ownerId;
    }
    
    // INVITES
    match /invites/{inviteId} {
      // Publicly readable to allow invitees to see details before they accept.
      allow read: if true; 
      // An organization member can create an invite, and the inviterId must match the user's ID.
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId) && request.resource.data.inviterId == request.auth.uid;
      // Any authenticated user can accept an invite (update its status). The server-side action validates the logic.
      allow update: if request.auth != null;
    }
    
    // TEAMS
    match /teams/{teamId} {
      // Org members can read, update, and delete teams.
      allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
      // Org members can create new teams.
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
    }
    
    // TASK TEMPLATES
    match /taskTemplates/{templateId} {
      // Org members can read, update, and delete templates.
      allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
      // The creatorId must match the user's ID upon creation.
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId) && request.resource.data.creatorId == request.auth.uid;
    }

    // TASKS
    match /tasks/{taskId} {
      // Read access: Must be an org member. If the task is private, user must be the creator or assignee.
      allow read: if request.auth != null && isOrgMember(resource.data.organizationId) && 
                    (resource.data.isPrivate == false || request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.assigneeId);
      
      // The creatorId must match the user's ID upon creation.
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId) && request.resource.data.creatorId == request.auth.uid;

      // Any org member can update a task.
      allow update: if request.auth != null && isOrgMember(resource.data.organizationId);
      
      // Any org member can delete a task.
      allow delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        // A user can only read, write, or delete their own notifications.
        allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        // A user can create a notification (the action logic ensures it's for someone else).
        allow create: if request.auth != null;
    }
  }
}
