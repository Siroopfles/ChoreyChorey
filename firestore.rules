rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isOrgMember(orgId) {
      // Checks if the requesting user is a member of the given organization.
      // This function can be called by other rules.
      let orgDoc = get(/databases/$(database)/documents/organizations/$(orgId));
      return request.auth.uid in orgDoc.data.members;
    }
    
    function isOrgOwner(orgId) {
      // Checks if the requesting user is the owner of the given organization.
      let orgDoc = get(/databases/$(database)/documents/organizations/$(orgId));
      return request.auth.uid == orgDoc.data.ownerId;
    }
    
    // --- COLLECTION RULES ---

    match /users/{userId} {
      // A user can read any other user's profile (for avatars, names).
      // A user can only write to their own document.
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      // A user can read an organization's document IF they are listed in its members map.
      // This is the key rule to prevent recursive lookups in helper functions.
      allow read: if request.auth.uid in resource.data.members;
      // Only the owner of an organization can modify its top-level document.
      allow write: if isOrgOwner(orgId);
    }

    match /organizations/{orgId}/members/{memberId} {
      // This path is not actually used as members are a map on the org doc.
      // But if it were a subcollection, this would be the rule.
      allow read: if isOrgMember(orgId);
      allow write: if isOrgOwner(orgId);
    }

    match /tasks/{taskId} {
      // CREATE: You can create a task if you are a member of the organization specified in the NEW task data.
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
      // READ, UPDATE, DELETE: You can interact with an existing task if you are a member of its organization.
      allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /projects/{projectId} {
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }
    
    match /teams/{teamId} {
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /invites/{inviteId} {
      // Anyone authenticated can read an invite to check its details.
      allow read: if request.auth != null;
      // Anyone authenticated can accept an invite (write), the logic is in the backend.
      // An invite can be created by a member of the organization.
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
      allow update: if request.auth != null;
    }
    
    match /taskTemplates/{templateId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /checklistTemplates/{templateId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }
    
    match /automations/{automationId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }
    
    match /sessions/{sessionId} {
      // A user can only access their own session documents.
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /apiKeys/{keyId} {
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /webhooks/{webhookId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /aiFeedback/{feedbackId} {
      // Any authenticated user can submit feedback.
      allow create: if request.auth != null;
    }
    
    match /personalGoals/{goalId} {
       // A user can only access their own goals.
       allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
       allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /teamChallenges/{challengeId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /ideas/{ideaId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /notifications/{notificationId} {
       // A user can only access their own notifications.
       allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
       allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /activityFeed/{feedItemId} {
       allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);
       allow read: if request.auth != null && isOrgMember(resource.data.organizationId);
    }

    match /presence/{userId} {
      // Users can see presence info of others in the same organization.
      allow read: if request.auth != null && isOrgMember(resource.data.organizationId);
      // A user can only write their own presence document.
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
