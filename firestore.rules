rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the requesting user is a member of a given organization.
    // It does this by reading the user's own document, which is always allowed.
    function isMemberOf(orgId) {
      return request.auth != null 
             && exists(/databases/$(database)/documents/users/$(request.auth.uid))
             && orgId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds;
    }
    
    // Helper function to check if the user is the owner of an organization.
    function isOwner(orgId) {
       return request.auth != null && get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    // --- Collection-specific Rules ---

    // Users can read and write to their own document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // You can read an organization's document IF you are a member of it.
    // Writing is restricted to the owner for safety.
    match /organizations/{orgId} {
      allow read: if isMemberOf(orgId);
      allow write: if isOwner(orgId);
    }

    // Tasks can be created/read/updated/deleted if the user is a member of the organization.
    match /tasks/{taskId} {
      allow create: if isMemberOf(request.resource.data.organizationId);
      allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }
    
    // Projects follow the same pattern as tasks.
    match /projects/{projectId} {
      allow create: if isMemberOf(request.resource.data.organizationId);
      allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }
    
    // Teams follow the same pattern as tasks.
    match /teams/{teamId} {
      allow create: if isMemberOf(request.resource.data.organizationId);
      allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }

    // Invites can be read and created by any authenticated user.
    match /invites/{inviteId} {
      allow read, create, update: if request.auth != null;
    }
    
    // Templates follow the same pattern as tasks.
    match /taskTemplates/{templateId} {
       allow create: if isMemberOf(request.resource.data.organizationId);
       allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }

    match /checklistTemplates/{templateId} {
       allow create: if isMemberOf(request.resource.data.organizationId);
       allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }
    
    // Automations follow the same pattern as tasks.
    match /automations/{automationId} {
       allow create: if isMemberOf(request.resource.data.organizationId);
       allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }
    
    // Sessions can only be accessed by the user who owns them.
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // API Keys and Webhooks follow the same pattern as tasks.
    match /apiKeys/{keyId} {
      allow create: if isMemberOf(request.resource.data.organizationId);
      allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }

    match /webhooks/{webhookId} {
       allow create: if isMemberOf(request.resource.data.organizationId);
       allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }

    // Anyone authenticated can submit feedback.
    match /aiFeedback/{feedbackId} {
      allow create: if request.auth != null;
    }
    
    // Personal goals are private to the user.
    match /personalGoals/{goalId} {
       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
       allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Team challenges are accessible to all members of the organization.
    match /teamChallenges/{challengeId} {
       allow create: if isMemberOf(request.resource.data.organizationId);
       allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }

    // Ideas are accessible to all members of the organization.
    match /ideas/{ideaId} {
       allow create: if isMemberOf(request.resource.data.organizationId);
       allow read, update, delete: if isMemberOf(resource.data.organizationId);
    }

    // Notifications are private to the user.
    match /notifications/{notificationId} {
       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
       allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Activity feed is readable by members, and creatable by any member.
    match /activityFeed/{feedItemId} {
       allow read: if isMemberOf(resource.data.organizationId);
       allow create: if isMemberOf(request.resource.data.organizationId);
    }

    // User can write their own presence, others in the same org can read it.
    match /presence/{userId} {
      allow read: if isMemberOf(resource.data.organizationId);
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
     // Members subcollection (not currently used, but good practice).
    match /organizations/{orgId}/members/{memberId} {
      allow read: if isMemberOf(orgId);
      allow write: if isOwner(orgId);
    }
  }
}