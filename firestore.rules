
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isMember(orgId) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.has(orgId);
    }
    
    function isOwner(orgId) {
       return request.auth != null && get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      allow read: if isMember(orgId);
      allow write: if isOwner(orgId);
    }

    match /organizations/{orgId}/members/{memberId} {
      allow read: if isMember(orgId);
      allow write: if isOwner(orgId); // Or more granular permissions if needed
    }

    match /tasks/{taskId} {
      allow read, write: if request.auth != null && isMember(resource.data.organizationId);
    }

    match /projects/{projectId} {
       allow read, write: if request.auth != null && isMember(resource.data.organizationId);
    }
    
    match /teams/{teamId} {
       allow read, write: if request.auth != null && isMember(resource.data.organizationId);
    }

    match /invites/{inviteId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null;
    }
    
    match /taskTemplates/{templateId} {
       allow read, write: if request.auth != null && isMember(resource.data.organizationId);
    }

    match /checklistTemplates/{templateId} {
       allow read, write: if request.auth != null && isMember(resource.data.organizationId);
    }
    
    match /automations/{automationId} {
       allow read, write: if request.auth != null && isMember(resource.data.organizationId);
    }
    
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /apiKeys/{keyId} {
      allow read, create: if request.auth != null && isMember(resource.data.organizationId);
      allow delete, update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    match /webhooks/{webhookId} {
       allow read, write: if request.auth != null && isMember(resource.data.organizationId);
    }

    match /aiFeedback/{feedbackId} {
      allow create: if request.auth != null;
    }
    
    match /personalGoals/{goalId} {
       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /teamChallenges/{challengeId} {
       allow read, write: if request.auth != null && isMember(resource.data.organizationId);
    }

    match /ideas/{ideaId} {
       allow read, create: if request.auth != null && isMember(resource.data.organizationId);
       allow update: if request.auth != null; // Let backend logic handle permissions
    }

    match /notifications/{notificationId} {
       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /activityFeed/{feedItemId} {
       allow read: if isMember(resource.data.organizationId);
       allow create: if request.auth != null;
    }

    match /presence/{userId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds.has(resource.data.organizationId);
      allow write: if request.auth != null && request.auth.uid == userId;
    }

  }
}
