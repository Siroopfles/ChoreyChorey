rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function userIsAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return userIsAuthenticated() && request.auth.uid == userId;
    }
    
    function userIsOrgMember(orgId) {
      // Check against the user's current list of organizations in the database
      return userIsAuthenticated() && orgId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationIds;
    }
    
    function isOrgOwner(orgId) {
      return userIsAuthenticated() && get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    // --- Collection Rules ---
    match /users/{userId} {
      allow read, create: if isUser(userId);

      allow update: if isUser(userId) && (
        // Scenario 1: Basic profile update (name, avatar)
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatar']) &&
          request.resource.data.organizationIds == resource.data.organizationIds // orgs list cannot change
        ) ||
        // Scenario 2: Switching current organization
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentOrganizationId']) &&
          request.resource.data.organizationIds == resource.data.organizationIds && // orgs list cannot change
          request.resource.data.currentOrganizationId in resource.data.organizationIds // must be member of new org
        ) ||
        // Scenario 3: Creating a new organization (the atomic write)
        (
          request.resource.data.diff(resource.data).affectedKeys().hasAll(['organizationIds', 'currentOrganizationId']) &&
          request.resource.data.organizationIds.size() == resource.data.organizationIds.size() + 1 &&
          // Verify the new org is being set as current and is the one being added
          request.resource.data.currentOrganizationId == request.resource.data.organizationIds.diff(resource.data.organizationIds).added().get(0) &&
          // Verify in the same transaction that an org is being created with this ID and the user is the owner
          getAfter(/databases/$(database)/documents/organizations/$(request.resource.data.currentOrganizationId)).data.ownerId == userId
        )
      );
    }
    
    match /organizations/{orgId} {
      allow create: if isUser(request.resource.data.ownerId);
      allow read: if userIsOrgMember(orgId);
    }
    
    match /teams/{teamId} {
      function teamOrgId() { return get(/databases/$(database)/documents/teams/$(teamId)).data.organizationId; }
      function newTeamOrgId() { return request.resource.data.organizationId; }

      allow read: if userIsOrgMember(teamOrgId());
      allow create: if isOrgOwner(newTeamOrgId());
      allow update: if isOrgOwner(teamOrgId());
    }
    
    match /tasks/{taskId} {
      function taskOrgId() { 
        return get(/databases/$(database)/documents/tasks/$(taskId)).data.organizationId; 
      }
      function newTaskOrgId() { return request.resource.data.organizationId; }

      allow read, write: if userIsOrgMember(taskOrgId()) || userIsOrgMember(newTaskOrgId());
    }

    match /notifications/{notificationId} {
      allow read, write: if isUser(resource.data.userId);
    }
  }
}
