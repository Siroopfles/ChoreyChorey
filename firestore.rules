
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    
    // Is the user authenticated?
    function isAuth() {
      return request.auth != null;
    }
    
    // Get the user's role in a specific organization. Returns null if not a member.
    function getOrgRole(orgId) {
      let orgDoc = get(/databases/$(database)/documents/organizations/$(orgId)).data;
      if (!('members' in orgDoc) || !(request.auth.uid in orgDoc.members)) {
        return null;
      }
      return orgDoc.members[request.auth.uid].role;
    }

    // Is the user an owner of the organization?
    function isOrgOwner(orgId) {
      return getOrgRole(orgId) == 'Owner';
    }

    // Is the user an admin of the organization?
    function isOrgAdmin(orgId) {
       let role = getOrgRole(orgId);
       return role == 'Admin' || role == 'Owner';
    }
    
    // Is the user a member of the organization?
    function isOrgMember(orgId) {
      return getOrgRole(orgId) != null;
    }

    // Can the user view this specific task?
    function canViewTask(task) {
        if (!isOrgMember(task.organizationId)) {
            return false;
        }
        // Public tasks are visible to all org members.
        // Private tasks are only visible to the creator and assignee.
        return !task.isPrivate || task.creatorId == request.auth.uid || task.assigneeId == request.auth.uid;
    }

    // --- User Rules ---
    match /users/{userId} {
      // Users can only read their own data.
      allow read: if isAuth() && request.auth.uid == userId;
      
      // Users can create their own user document upon signup.
      allow create: if isAuth() && request.auth.uid == userId;

      // Users can only update their own profile data.
      allow update: if isAuth() && request.auth.uid == userId &&
                       request.resource.data.keys().hasOnly(['name', 'avatar', 'skills', 'currentOrganizationId', 'organizationIds']);
    }

    // --- Organization Rules ---
    match /organizations/{orgId} {
      allow read: if isAuth() && isOrgMember(orgId);
      allow create: if isAuth(); // Any authenticated user can create an org
      allow update: if isAuth() && isOrgOwner(orgId); // Only owner can update org details
      allow delete: if isAuth() && isOrgOwner(orgId); // Only owner can delete
    }
    
    // --- Team Rules ---
    match /teams/{teamId} {
      allow read: if isAuth() && isOrgMember(request.resource.data.organizationId);
      allow create, update: if isAuth() && isOrgAdmin(request.resource.data.organizationId);
      allow delete: if isAuth() && isOrgAdmin(request.resource.data.organizationId);
    }
    
    // --- Task Rules ---
    match /tasks/{taskId} {
      // Allow read if the user can view the task based on privacy settings
      allow read: if isAuth() && canViewTask(resource.data);

      // Allow create if user is a member of the organization
      allow create: if isAuth() && isOrgMember(request.resource.data.organizationId) &&
                       request.resource.data.creatorId == request.auth.uid; // Must be creator
                       
      // Allow update if user is an admin, or the assignee/creator of the task
      allow update: if isAuth() && isOrgMember(resource.data.organizationId) &&
                       (isOrgAdmin(resource.data.organizationId) || resource.data.creatorId == request.auth.uid || resource.data.assigneeId == request.auth.uid);

      // Allow delete only by org admins
      allow delete: if isAuth() && isOrgAdmin(resource.data.organizationId);
    }

    // --- Task Template Rules ---
    match /taskTemplates/{templateId} {
      allow read, create: if isAuth() && isOrgMember(request.resource.data.organizationId);
      allow update, delete: if isAuth() && isOrgAdmin(request.resource.data.organizationId);
    }

    // --- Invite Rules ---
    match /invites/{inviteId} {
      allow read: if isAuth(); // Anyone with the link can read to get org details
      allow create: if isAuth() && 
                      isOrgAdmin(request.resource.data.organizationId) && 
                      request.resource.data.inviterId == request.auth.uid;
      allow update: if isAuth() && isOrgMember(resource.data.organizationId) == false; // Allow user to accept invite if not yet a member
      allow delete: if isAuth() && isOrgAdmin(get(/databases/$(database)/documents/invites/$(inviteId)).data.organizationId);
    }
    
    // --- Notification Rules ---
    match /notifications/{notificationId} {
        allow read, update, delete: if isAuth() && request.auth.uid == resource.data.userId;
        allow create: if isAuth(); // Server-side logic handles creation
    }
  }
}
