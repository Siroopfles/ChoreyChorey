
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOrgMember(orgId) {
      // Robust check: ensures the organization and the 'members' map exist before checking for the user's UID.
      let orgDoc = get(/databases/$(database)/documents/organizations/$(orgId));
      return request.auth != null &&
             exists(/databases/$(database)/documents/organizations/$(orgId)) &&
             'members' in orgDoc.data && orgDoc.data.members is map &&
             request.auth.uid in orgDoc.data.members;
    }
    
    function isOrgOwner(orgId) {
       // Checks if the user is the owner of the organization.
       return request.auth != null && 
              exists(/databases/$(database)/documents/organizations/$(orgId)) &&
              get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    match /organizations/{orgId} {
      // Only members can read organization details.
      allow read: if isOrgMember(orgId);
      // Only the owner can write to the main organization document.
      allow write: if isOrgOwner(orgId);
    }
    
    match /tasks/{taskId} {
      // Users can create tasks if they are a member of the organization specified in the new task data.
      allow create: if isOrgMember(request.resource.data.organizationId);
      // Users can read, update, or delete tasks if they are a member of the task's organization.
      allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /projects/{projectId} {
      allow create: if isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }
    
    match /teams/{teamId} {
      allow create: if isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /invites/{inviteId} {
      allow read, create, update: if request.auth != null;
    }
    
    match /taskTemplates/{templateId} {
      allow create: if isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /checklistTemplates/{templateId} {
      allow create: if isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }
    
    match /automations/{automationId} {
      allow create: if isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }
    
    match /sessions/{sessionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /apiKeys/{keyId} {
      allow create: if isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /webhooks/{webhookId} {
      allow create: if isOrgMember(request.resource.data.organizationId);
      allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /aiFeedback/{feedbackId} {
      allow create: if request.auth != null;
    }
    
    match /personalGoals/{goalId} {
       allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
       allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /teamChallenges/{challengeId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update, delete: if isOrgMember(resource.data.organizationId);
    }

    match /ideas/{ideaId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read, update: if isOrgMember(resource.data.organizationId);
    }

    match /notifications/{notificationId} {
       allow create: if request.auth != null; // System/other users can create notifications for a user
       allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /activityFeed/{feedItemId} {
       allow create: if isOrgMember(request.resource.data.organizationId);
       allow read: if isOrgMember(resource.data.organizationId);
    }

    match /presence/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}

    